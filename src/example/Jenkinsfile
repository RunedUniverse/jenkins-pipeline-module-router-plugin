pipeline {
	agent any
	tools {
		maven 'maven-latest'
	}
	options {
		moduleRouter {
			modules {
				module id: 'mvn-parent'			path: '.'					name: 'Maven Parent'
				module id: 'java-utils-async'	path: 'java-utils-async'	name: 'Java Utils Async'
				module id: 'java-utils-bom'		path: 'java-utils-bom'		name: 'Bill of Materials'
				module id: 'java-utils-chain'	path: 'java-utils-chain'	name: 'Java Chain Library'
				module id: 'java-utils-common'	path: 'java-utils-common'	name: 'Java Utils Common'
				module id: 'java-utils-errors'	path: 'java-utils-errors'	name: 'Java Error Handling Library'
				module id: 'java-utils-logging'	path: 'java-utils-logging'	name: 'Java Logging Tools'
				module id: 'java-utils-scanner'	path: 'java-utils-scanner'	name: 'Java Scanner'
			}
			initModule {
				activate(true);
			}
		}
	}
	environment {
		PATH = """${sh(
				returnStdout: true,
				script: 'chmod +x $WORKSPACE/.build/*; printf $WORKSPACE/.build:$PATH'
			)}"""

		GLOBAL_MAVEN_SETTINGS = """${sh(
				returnStdout: true,
				script: 'printf /srv/jenkins/.m2/global-settings.xml'
			)}"""
		MAVEN_SETTINGS = """${sh(
				returnStdout: true,
				script: 'printf $WORKSPACE/.mvn/settings.xml'
			)}"""
		MAVEN_TOOLCHAINS = """${sh(
				returnStdout: true,
				script: 'printf $WORKSPACE/.mvn/toolchains.xml'
			)}"""
		REPOS = """${sh(
				returnStdout: true,
				script: 'REPOS=repo-releases; if [ $GIT_BRANCH != master ]; then REPOS=$REPOS,repo-development; fi; printf $REPOS'
			)}"""
	}
	stages {
		stage('Initialize') {
			steps {
				sh 'echo "PATH = ${PATH}"'
				sh 'echo "M2_HOME = ${M2_HOME}"'
				sh 'mvn-dev -P ${REPOS},install --non-recursive'
				script {
					env.RESULT_PATH = "${WORKSPACE}/result/"
					env.ARCHIVE_PATH = "${WORKSPACE}/archive/"
				}
				sh 'printenv | sort'
				sh 'mkdir -p ${RESULT_PATH}'
				sh 'mkdir -p ${ARCHIVE_PATH}'
			}
		}
		// init after "Initialize" since the selection requires maven, which in turn requires the parent to be already installed!
		stagePerModule(name: 'Init Module Router', parallel: true) {
			steps {
				module.activate(
					sh(
						returnStdout: true,
						script: 'git-check-version-tag '+moduleId()+' '+relPathToModule("mvn-parent")
					) == '1'
				);
			}
		}
		stage('Update Maven Repo') {
			when {
				anyActiveModule
			}
			steps {
				sh 'mvn-dev -P ${REPOS} dependency:purge-local-repository -DactTransitively=false -DreResolve=false --non-recursive'
				sh 'mvn-dev -P ${REPOS} dependency:resolve --non-recursive'
			}
		}

		stagePerModule(name: 'Code Validation', parallel: true) {
			when {
				expression { active() }
			}
			steps {
				sh 'mvn-dev -P ${REPOS},validate,license-apache2-approve -pl='+relPathToModule("mvn-parent")
			}
		}
		stage('Install Maven Parent') {
			when {
				activeModule id: 'mvn-parent'
			}
			steps {
				sh 'mvn-dev -P ${REPOS},toolchain-openjdk-1-8-0,install --non-recursive'
			}
			post {
				always {
					dir(path: 'target') {
						sh 'ls -l'
						sh 'cp *.pom *.asc ${RESULT_PATH}'
					}
				}
			}
		}

		stage('Install - Bill of Materials') {
			when {
				activeModule id: 'java-utils-bom'
			}
			steps {
				sh 'mvn-dev -P ${REPOS},toolchain-openjdk-1-8-0,install -pl=java-utils-bom'
			}
			post {
				always {
					dir(path: 'java-utils-bom/target') {
						sh 'ls -l'
						sh 'cp *.pom *.asc ${RESULT_PATH}'
					}
				}
			}
		}
		
		stagePerModule(name: 'Build [1st Level]', parallel: true, 
				select: [ 'java-utils-logging', 'java-utils-errors', 'java-utils-common', 'java-utils-async' ]) {
			when {
				expression { active() }
			}
			steps {
				sh 'mvn-dev -P ${REPOS},toolchain-openjdk-1-8-0,install -pl='+relPathToModule("mvn-parent")
			}
			post {
				always {
					dir(path: 'java-utils-logging/target') {
						sh 'ls -l'
						sh 'cp *.pom *.jar *.asc ${RESULT_PATH}'
					}
				}
			}
		}
		stagePerModule(name: 'Build [2nd Level]', parallel: true, 
				select: [ 'java-utils-scanner', 'java-utils-chain' ]) {
			when {
				expression { active() }
			}
			steps {
				sh 'mvn-dev -P ${REPOS},toolchain-openjdk-1-8-0,install -pl='+relPathToModule("mvn-parent")
			}
			post {
				always {
					dir(path: 'java-utils-logging/target') {
						sh 'ls -l'
						sh 'cp *.pom *.jar *.asc ${RESULT_PATH}'
					}
				}
			}
		}

		stage('Test') {
			when {
				anyOf {
					activeModule id: 'java-utils-logging'
					activeModule id: 'java-utils-errors'
					activeModule id: 'java-utils-common'
					activeModule id: 'java-utils-async'
					activeModule id: 'java-utils-scanner'
					activeModule id: 'java-utils-chain'
				}
			}
			steps {
				sh 'mvn-dev -P ${REPOS},toolchain-openjdk-1-8-0,build-tests'
				sh 'mvn-dev -P ${REPOS},toolchain-openjdk-1-8-0,test-junit-jupiter,test-system'
			}
			post {
				always {
					junit '*/target/surefire-reports/*.xml'
				}
				failure {
					archiveArtifacts artifacts: '*/target/surefire-reports/*.xml'
				}
			}
		}

		stage('Package Build Result') {
			when {
				anyActiveModule
			}
			steps {
				dir(path: "${env.RESULT_PATH}") {
					sh 'ls -l'
					sh 'tar -I "pxz -9" -cvf ${ARCHIVE_PATH}utils.tar.xz *'
					sh 'zip -9 ${ARCHIVE_PATH}utils.zip *'
				}
			}
			post {
				always {
					dir(path: "${env.RESULT_PATH}") {
						archiveArtifacts artifacts: '*', fingerprint: true
					}
					dir(path: "${env.ARCHIVE_PATH}") {
						archiveArtifacts artifacts: '*', fingerprint: true
					}
				}
			}
		}
		
		stagePerModule(name: 'Deploy', parallel: true ) {
			when {
				expression { active() }
			}
			stages {
				stage('Develop'){
					steps {
						sh 'mvn-dev -P ${REPOS},dist-repo-development,deploy -pl='+relPathToModule("mvn-parent")
					}
				}
				stage('Release') {
					when {
						branch 'master'
					}
					steps {
						sh 'mvn-dev -P ${REPOS},dist-repo-releases,deploy-signed -pl='+relPathToModule("mvn-parent")
					}
				}
				stage('Stage at Maven-Central') {
					when {
						branch 'master'
					}
					steps {
						// never add : -P ${REPOS} => this is ment to fail here
						sh 'mvn-dev -P repo-releases,dist-repo-maven-central,deploy-signed -pl='+relPathToModule("mvn-parent")
						sshagent (credentials: ['RunedUniverse-Jenkins']) {
							sh 'git push origin $(git-create-version-tag '+id()+' '+relPathToModule("mvn-parent")+')'
						}
					}
				}
			}
		}
	}
	post {
		cleanup {
			cleanWs()
		}
	}
}
